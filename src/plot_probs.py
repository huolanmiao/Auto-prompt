# # import matplotlib.pyplot as plt
# # import numpy as np

# # # 假设 prob_list 是给定的概率分布列表
# # prob_list = [0.0540, 0.0533, 0.0460, 0.0435, 0.0456, 0.0470, 0.0515, 0.0515, 0.0515,
# #          0.0494, 0.0515, 0.0515, 0.0515, 0.0515, 0.0515, 0.0515, 0.0515, 0.0494,
# #          0.0510, 0.0456]

# # print(sum(prob_list))
# # # 创建 x 轴数据（可以用概率列表的索引作为 x 轴，或者是自定义的标签）
# # x = np.arange(len(prob_list))

# # # 绘制概率分布图
# # plt.bar(x, prob_list, color='skyblue', edgecolor='black')

# # # 添加标签和标题
# # plt.xlabel('Event')
# # plt.ylabel('Probability')
# # plt.title('Probability Distribution')

# # # 显示概率值在每个条形图上
# # for i, v in enumerate(prob_list):
# #     plt.text(i, v + 0.01, f'{v:.2f}', ha='center')

# # # 显示图形
# # plt.savefig('fig.png')
# # plt.show()

from data.knowledge import KnowledgeDataset
import numpy as np
import torch
probs = np.array([[9.8436e-02, 1.0179e-01, 1.0617e-01, 2.5598e-02, 1.5850e-02, 1.0278e-01,
         5.8464e-02, 1.0635e-01, 1.0000e-04, 4.4757e-02, 1.1431e-02, 2.7190e-02,
         4.7698e-02, 1.0000e-04, 1.9550e-02, 4.5452e-02, 4.4147e-02, 6.1191e-02,
         1.0000e-04, 8.2437e-02],
        [1.6887e-02, 6.2786e-02, 1.8044e-02, 1.0000e-04, 1.1702e-01, 5.8233e-02,
         1.1335e-02, 3.2514e-02, 5.1089e-02, 4.3871e-02, 5.9232e-02, 1.1226e-02,
         1.2577e-01, 9.7314e-02, 1.0765e-02, 7.8650e-02, 6.9266e-02, 5.7879e-02,
         5.8627e-02, 1.7938e-02],
        [3.1241e-03, 5.4199e-02, 2.9452e-02, 7.6968e-02, 5.7279e-02, 5.2930e-02,
         7.7210e-02, 7.4233e-02, 7.1760e-03, 1.0000e-04, 1.0000e-04, 5.1840e-02,
         9.7815e-02, 6.3646e-02, 7.0628e-02, 5.3603e-02, 3.3578e-03, 4.8974e-02,
         6.1288e-02, 1.1542e-01],
        [1.0000e-04, 4.1050e-02, 6.1135e-02, 1.0000e-04, 4.4018e-02, 4.0721e-02,
         6.2456e-02, 4.3186e-02, 8.2576e-02, 4.2730e-02, 5.0178e-02, 7.8602e-02,
         1.6565e-02, 4.2961e-02, 1.0000e-04, 6.6520e-02, 8.6875e-02, 8.3558e-02,
         5.0106e-02, 1.0720e-01],
        [8.5746e-02, 2.1222e-02, 5.6706e-02, 1.0000e-04, 5.6733e-02, 3.2131e-02,
         6.4546e-02, 1.3793e-02, 3.4105e-02, 5.5539e-02, 2.9710e-02, 1.3829e-01,
         7.1612e-02, 4.9016e-02, 5.6721e-02, 5.5398e-02, 2.4916e-02, 3.4703e-02,
         7.4399e-02, 4.2414e-02],
        [6.3176e-02, 7.7039e-02, 5.3630e-02, 1.0000e-04, 5.0210e-02, 3.8893e-03,
         3.7295e-02, 9.8502e-02, 5.3425e-02, 9.9611e-02, 5.2605e-02, 1.0000e-04,
         5.1401e-02, 7.9043e-02, 3.3797e-02, 8.3999e-02, 9.1422e-02, 5.2531e-02,
         6.0568e-03, 1.2264e-02],
        [5.1963e-02, 7.3183e-02, 4.2308e-02, 8.0613e-02, 9.8569e-02, 6.0712e-02,
         4.6196e-02, 1.2354e-01, 1.0000e-04, 2.1898e-02, 2.1303e-02, 6.3030e-02,
         1.0000e-04, 1.0000e-04, 6.0643e-02, 1.1160e-01, 5.4059e-02, 8.1151e-02,
         1.0000e-04, 8.4840e-03],
        [5.0861e-02, 7.3319e-02, 1.9868e-02, 7.1851e-02, 8.2895e-03, 5.9876e-02,
         3.3664e-02, 5.2941e-02, 1.0302e-01, 4.9526e-02, 4.4129e-02, 1.1730e-02,
         3.8769e-02, 9.4117e-02, 6.6891e-03, 8.7435e-02, 1.6228e-02, 9.8257e-02,
         6.1247e-02, 1.8401e-02]])

sample_index = np.argmax(probs, axis=1)

sample_probs = torch.FloatTensor([[1 / 20] * 20] * 8) 
prompts_dist = torch.distributions.Categorical(sample_probs)
sample_index = prompts_dist.sample()
knowledge_dataset = KnowledgeDataset("datasets/gsm8k_/deepseek/gsm8k_pool_20.json")

print(sample_index)
for i in sample_index:
    print(f"Question: {knowledge_dataset[i]['Question']}")
    print(f"{knowledge_dataset[i]['Rationale']} The answer is {knowledge_dataset[i]['Ground_truth']}.\n")

# import numpy as np
# import matplotlib.pyplot as plt

# # 假设我们有一个 8x20 的概率矩阵，每一行是一个归一化的概率分布
# prob_matrix = np.array([[0.0502, 0.0434, 0.1043, 0.0261, 0.0818, 0.0862, 0.0511, 0.0511, 0.0052,
#          0.0434, 0.0577, 0.0511, 0.0378, 0.0577, 0.0378, 0.0511, 0.0511, 0.0434,
#          0.0052, 0.0641],
#         [0.0048, 0.0511, 0.0511, 0.0115, 0.0471, 0.0521, 0.0521, 0.0511, 0.0511,
#          0.1081, 0.0462, 0.0733, 0.1124, 0.0582, 0.0115, 0.0349, 0.0608, 0.0521,
#          0.0462, 0.0248],
#         [0.0063, 0.0564, 0.0474, 0.0729, 0.0471, 0.0471, 0.0649, 0.1076, 0.0368,
#          0.0471, 0.0063, 0.0608, 0.0634, 0.0702, 0.0471, 0.0471, 0.0063, 0.0539,
#          0.0634, 0.0471],
#         [0.0410, 0.0364, 0.0305, 0.0480, 0.0581, 0.0324, 0.0660, 0.0560, 0.0581,
#          0.0410, 0.0168, 0.0364, 0.0669, 0.0364, 0.0587, 0.0891, 0.0373, 0.1032,
#          0.0303, 0.0581],
#         [0.0611, 0.0282, 0.0567, 0.1003, 0.0468, 0.0164, 0.0505, 0.0109, 0.0635,
#          0.0695, 0.0425, 0.0855, 0.0293, 0.0567, 0.0190, 0.0110, 0.0603, 0.0611,
#          0.0456, 0.0855],
#         [0.0698, 0.0724, 0.0789, 0.0397, 0.0412, 0.0275, 0.0352, 0.1118, 0.0578,
#          0.0627, 0.0275, 0.0076, 0.0275, 0.0343, 0.0468, 0.0397, 0.0941, 0.0578,
#          0.0275, 0.0412],
#         [0.0533, 0.0659, 0.0255, 0.1069, 0.0595, 0.0497, 0.0427, 0.0659, 0.0046,
#          0.0086, 0.0086, 0.0595, 0.0654, 0.0533, 0.0255, 0.1019, 0.0528, 0.0659,
#          0.0255, 0.0595],
#         [0.0226, 0.0347, 0.0420, 0.0280, 0.0073, 0.0525, 0.0133, 0.0423, 0.0439,
#          0.0420, 0.0567, 0.0510, 0.0510, 0.0439, 0.0510, 0.0510, 0.0133, 0.1007,
#          0.0958, 0.0420]])

# # 将每一行归一化为概率分布
# # prob_matrix = prob_matrix / prob_matrix.sum(axis=1, keepdims=True)

# # 创建一个 8 行 1 列的子图
# fig, axes = plt.subplots(8, 1, figsize=(10, 20))  # 8行1列，确保每个图像足够大

# # 绘制每一行的分布曲线
# for i in range(8):
#     axes[i].plot(prob_matrix[i], marker='o', linestyle='-', color='b', label=f'Row {i+1}')
#     axes[i].set_title(f'Probability Distribution for Row {i+1}')
#     axes[i].set_xlabel('Index')
#     axes[i].set_ylabel('Probability')
#     axes[i].legend()

# # 调整子图布局，避免重叠
# plt.tight_layout()

# # 显示图形
# plt.show()
# plt.savefig('./probs1.png')

# import numpy as np
# import matplotlib.pyplot as plt
# from scipy.interpolate import CubicSpline

# # 假设我们有一个 8x20 的概率矩阵，每一行是一个归一化的概率分布
# prob_matrix = np.array([[9.4376e-02, 1.0843e-01, 1.0043e-01, 2.8103e-02, 2.5961e-02, 8.8639e-02,
#          5.1772e-02, 9.1308e-02, 2.7465e-03, 4.4460e-02, 2.3259e-02, 2.4596e-02,
#          6.0652e-02, 3.6826e-02, 2.3756e-02, 4.8730e-02, 2.9781e-02, 3.9392e-02,
#          2.8784e-03, 7.3241e-02],
#         [1.9895e-02, 5.4784e-02, 3.3005e-02, 1.0000e-04, 1.0623e-01, 5.3931e-02,
#          2.9159e-02, 4.5668e-02, 5.9621e-02, 5.8303e-02, 5.4514e-02, 1.9522e-02,
#          1.2179e-01, 8.3582e-02, 9.8653e-03, 7.4980e-02, 4.6740e-02, 5.3617e-02,
#          5.4264e-02, 2.1225e-02],
#         [5.1633e-03, 4.9056e-02, 5.7002e-02, 6.9011e-02, 3.7649e-02, 4.8047e-02,
#          7.1398e-02, 6.1420e-02, 3.3665e-02, 2.0527e-02, 2.5637e-03, 4.7073e-02,
#          1.0611e-01, 7.6842e-02, 4.6863e-02, 4.8487e-02, 4.2279e-03, 5.4876e-02,
#          5.0177e-02, 1.0973e-01],
#         [5.9023e-03, 4.2947e-02, 5.7747e-02, 1.0000e-04, 6.6883e-02, 2.1926e-02,
#          7.7097e-02, 4.4695e-02, 7.3917e-02, 4.4376e-02, 3.2963e-02, 7.1827e-02,
#          1.2735e-02, 4.4879e-02, 1.0000e-04, 8.6742e-02, 9.3082e-02, 1.0474e-01,
#          1.4829e-02, 1.0178e-01],
#         [8.8002e-02, 1.7417e-02, 4.3550e-02, 1.7136e-02, 5.0506e-02, 4.9055e-02,
#          6.7046e-02, 1.3998e-02, 3.7537e-02, 7.0748e-02, 3.3035e-02, 1.3178e-01,
#          7.5195e-02, 2.5956e-02, 5.0274e-02, 4.9252e-02, 3.0746e-02, 4.2825e-02,
#          5.8557e-02, 4.7881e-02],
#         [5.7753e-02, 9.4873e-02, 5.2752e-02, 1.0000e-04, 6.6110e-02, 2.0412e-02,
#          3.6997e-02, 9.2832e-02, 5.2650e-02, 9.0879e-02, 5.2056e-02, 1.0000e-04,
#          5.0680e-02, 6.4597e-02, 4.6322e-03, 9.0825e-02, 9.5086e-02, 3.4618e-02,
#          1.2800e-02, 2.8766e-02],
#         [1.5115e-02, 6.2955e-02, 5.7415e-02, 7.2626e-02, 9.0300e-02, 6.0011e-02,
#          4.0126e-02, 1.3216e-01, 6.5664e-03, 2.8858e-02, 2.8274e-02, 4.0963e-02,
#          1.0000e-04, 1.0000e-04, 6.0055e-02, 9.5138e-02, 6.4081e-02, 8.1419e-02,
#          3.3745e-02, 3.0377e-02],
#         [6.1796e-02, 4.5982e-02, 3.7694e-02, 6.0919e-02, 1.6126e-02, 3.0911e-02,
#          8.5420e-03, 5.2578e-02, 9.5076e-02, 5.0966e-02, 5.5073e-02, 2.9535e-02,
#          4.1034e-02, 8.5538e-02, 2.6649e-02, 7.5284e-02, 2.2007e-02, 1.1471e-01,
#          5.9604e-02, 2.9821e-02]])

# # 将每一行归一化为概率分布
# # prob_matrix = prob_matrix / prob_matrix.sum(axis=1, keepdims=True)

# # 创建一个 8 行 1 列的子图
# fig, axes = plt.subplots(8, 1, figsize=(10, 20))  # 8行1列，确保每个图像足够大

# # 绘制每一行的分布曲线并进行插值平滑
# x = np.arange(prob_matrix.shape[1])  # 原始的索引值

# for i in range(8):
#     y = prob_matrix[i]
    
#     # 使用 Cubic Spline 插值，生成更多的数据点
#     spline = CubicSpline(x, y)
    
#     # 生成插值后的更细的 x 值
#     x_fine = np.linspace(x.min(), x.max(), 200)  # 200 是插值后的点数，可以根据需要调整
    
#     # 生成插值后的 y 值
#     y_fine = spline(x_fine)
    
#     # 绘制平滑后的曲线
#     axes[i].plot(x_fine, y_fine, label=f'Row {i+1} (Smoothed)', color='b')
#     axes[i].set_title(f'Smoothed Probability Distribution for Row {i+1}')
#     axes[i].set_xlabel('Index')
#     axes[i].set_ylabel('Probability')
#     axes[i].legend()

# # 调整子图布局，避免重叠
# plt.tight_layout()

# # 显示图形
# plt.show()
# plt.savefig('./probs8.png')